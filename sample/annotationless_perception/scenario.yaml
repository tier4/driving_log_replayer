ScenarioFormatVersion: 2.2.0
ScenarioName: sample_annotationless_perception
ScenarioDescription: sample_annotationless_perception
SensorModel: sample_sensor_kit
VehicleModel: sample_vehicle
VehicleId: default
LocalMapPath: $HOME/autoware_map/sample-map-planning
Evaluation:
  UseCaseName: annotationless_perception
  UseCaseFormatVersion: 0.2.0
  Conditions:
    ClassConditions:
      # Describe the conditions for each class. If a class with no conditions is output, only the metrics are calculated. It does not affect the evaluation.
      # In the sample data, the class of TRUCK is also output, but the condition is not described, so TRUCK is always Success.
      # When specifying conditions from result.jsonl, only keys described here will be updated.
      # Even though TRUCK metrics appear in result.jsonl, they are not added to the evaluation condition because the TRUCK key is not specified in this example.
      CAR: # classification key
        Threshold:
          # Keys not described will not be evaluated (will always be a success)
          lateral_deviation: { min: 10.0, max: 10.0, mean: 10.0 }
          yaw_deviation: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_5.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_3.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_2.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_1.00: { min: 10.0, max: 10.0, mean: 10.0 }
        PassRange: 0.5-1.05 # lower[<=1.0]-upper[>=1.0] # The test will pass under the following `condition threshold * lower <= Σ deviation / len(deviation) <= threshold * upper`
      BUS: # classification key
        Threshold:
          # Only lateral_deviation is evaluated.
          lateral_deviation: { max: 10.0 } # Only max is evaluated.
        PassRange: 0.5-1.05 # lower[<=1.0]-upper[>=1.0] # The test will pass under the following `condition threshold * lower <= Σ deviation / len(deviation) <= threshold * upper`
