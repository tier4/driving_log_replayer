ScenarioFormatVersion: 2.2.0
ScenarioName: sample_annotationless_perception
ScenarioDescription: sample_annotationless_perception
SensorModel: sample_sensor_kit
VehicleModel: sample_vehicle
VehicleId: default
LocalMapPath: $HOME/autoware_map/sample-map-planning
Evaluation:
  UseCaseName: annotationless_perception
  UseCaseFormatVersion: 0.2.0
  Conditions:
    ClassConditions:
      # Describe the conditions for each class. If a class with no condition is output, the default condition will be applied.
      CAR: # classification key
        # Threshold: {} # If Metrics are specified from result.jsonl of a previous test, the value here will be overwritten. If it is a dictionary type, it can be empty.
        Threshold:
          lateral_deviation: { min: 10.0, max: 10.0, mean: 10.0 }
          yaw_deviation: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_5.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_3.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_2.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_1.00: { min: 10.0, max: 10.0, mean: 10.0 }
        PassRange: 0.5-1.05 # lower[<=1.0]-upper[>=1.0] # The test will pass under the following `condition threshold * lower <= Σ deviation / len(deviation) <= threshold * upper`
      BUS: # classification key
        # Threshold: {} # If Metrics are specified from result.jsonl of a previous test, the value here will be overwritten. If it is a dictionary type, it can be empty.
        Threshold:
          lateral_deviation: { min: 10.0, max: 10.0, mean: 10.0 }
          yaw_deviation: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_5.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_3.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_2.00: { min: 10.0, max: 10.0, mean: 10.0 }
          predicted_path_deviation_1.00: { min: 10.0, max: 10.0, mean: 10.0 }
        PassRange: 0.5-1.05 # lower[<=1.0]-upper[>=1.0] # The test will pass under the following `condition threshold * lower <= Σ deviation / len(deviation) <= threshold * upper`
